package io.github.vooft.kafka.network.messages

import io.github.vooft.kafka.serialization.common.customtypes.toInt16String
import kotlinx.serialization.DeserializationStrategy

// must be aligned with class generated by https://github.com/apache/kafka/blob/trunk/generator/src/main/java/org/apache/kafka/message/ApiMessageTypeGenerator.java
fun ApiKey.requestHeaderApiVersion(): ApiVersion = when (this) {
    ApiKey.PRODUCE -> ApiVersion.V0
    ApiKey.FETCH -> ApiVersion.V1
    ApiKey.METADATA -> ApiVersion.V1
    ApiKey.OFFSET_FETCH -> ApiVersion.V1
    ApiKey.API_VERSIONS -> ApiVersion.V1
}

fun ApiKey.responseHeaderApiVersion(): ApiVersion = when (this) {
    ApiKey.PRODUCE -> ApiVersion.V0
    ApiKey.FETCH -> ApiVersion.V0
    ApiKey.METADATA -> ApiVersion.V0
    ApiKey.OFFSET_FETCH -> ApiVersion.V0
    ApiKey.API_VERSIONS -> ApiVersion.V0
}

fun KafkaRequest.nextHeader(clientId: String? = null): KafkaRequestHeader = when (apiKey.requestHeaderApiVersion()) {
//    ApiVersion.V0 -> KafkaRequestHeaderV0(apiKey = apiKey, correlationId = CorrelationId.next())
    ApiVersion.V0 -> KafkaRequestHeaderV1(apiKey = apiKey, correlationId = CorrelationId.next(), apiVersion = apiVersion)
    else -> KafkaRequestHeaderV1(
        apiKey = apiKey,
        correlationId = CorrelationId.next(),
        apiVersion = apiVersion,
        clientId = clientId.toInt16String()
    )
}

fun ApiKey.responseHeaderDeserializer() = when (responseHeaderApiVersion()) {
    ApiVersion.V0 -> KafkaResponseHeaderV0.serializer()
    else -> KafkaResponseHeaderV1.serializer()
}

fun KafkaRequest.responseHeaderDeserializer(): DeserializationStrategy<KafkaResponseHeader> = apiKey.responseHeaderDeserializer()
